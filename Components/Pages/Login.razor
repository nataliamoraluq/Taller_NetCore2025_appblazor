@page "/auth/login"
@using TallerNatBlazorApp.Data.Auth
@using Microsoft.AspNetCore.Components

@rendermode InteractiveServer

@using Core.Entities
@using Data.Models
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject TokenContainer tokenContainer
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

<h3>Inicio de Sesión (Login)</h3>

<EditForm Model="@authRequest">
    <!-- 
    OnValidSubmit="HandleValidSubmit"
    -->
    <DataAnnotationsValidator/>
    <div class="form-group d-flex flex-column">
        <label>
            <span>Usuario</span>
            <InputText class="form-control" @bind-Value="authRequest!.UserName"/>
            <ValidationMessage For="() => authRequest!.UserName" class="alert alert-danger" />
        </label>
        <label>
            <span>Contraseña</span>
            <input type="password" @bind="authRequest!.Password" class="form-control" id="password" placeholder="Password">
            <ValidationMessage For="() => authRequest!.UserName" class="alert alert-danger" />
        </label>
        <!-- agg aqui los mensajitos con colores del entregable anterior!!!-->
    </div>
    <!--<input class="btn btn-dark" type="submit" value="Enviar"/> -->
    <button class="btn btn-outline-primary" @onclick=HandleValidSubmit>Enviar</button>
    <div>@mensaje</div>
</EditForm>

@*
@code {
    private User? authRequest = new User();
    //private UserDTO? authRequest = new User();
    public async void HandleValidSubmit()
    {
        var authResponse = await AuthService.Login(authRequest!);
        if (authResponse != null && authResponse.Ok)
        {
            tokenContainer.AsignarToken(authResponse.Message);
            //await SessionStorage.SetItemAsync("token", authResponse.Message);
            //token llega aqui cm respuesta de la api al llamar al Login!
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(authResponse.Message);
            NavigationManager.NavigateTo("/");
        }
    }
}*@

@code {
    private UserDTO? authRequest = new UserDTO();
    private string claseMensaje { get; set; } = string.Empty;
    private string mensaje { get; set; } = string.Empty;
    public async void HandleValidSubmit()
    {
        
        var authResponse = await AuthService.Login(authRequest!);
        if (authResponse != null && authResponse.Ok)
        {
            tokenContainer.AsignarToken(authResponse.Message);
            //await SessionStorage.SetItemAsync("token", authResponse.Message);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(authResponse.Message);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            mensaje = "Error! nombre de usuario o contraseña incorrecta";
            claseMensaje = "alert alert-danger";
            StateHasChanged();
        }
    }
}